#!/bin/bash

# git squash [integration-branch]
#
# squash automates cleaning up a "dirty" feature or development branch. 
# Computes the latest common commit in your integration branch automagically
# and executes 'git rebase -i <integration commit>'.
#
# If no parent-branch is supplied, the squash will be generated against master.
#
# git-squash Copyright 2014 Justin Tomich <tomichj at gmail dot com>.
# 
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You can find the GNU General Public License at: http://www.gnu.org/licenses/
#
#

integration_branch=${1:-master}
echo Squashing this branch against $integration_branch

count=$(git rev-list --count HEAD ^$integration_branch)
echo You are $count commits ahead of $integration_branch

if [ $count -le 1 ]; then
  echo Nothing to squash at this time, exiting.
  exit 1
fi

common_ancestor_commit=$(diff -u <(git rev-list --first-parent $integration_branch) <(git rev-list --first-parent HEAD) | sed -ne 's/^ //p' | head -1)
echo Last common commit $common_ancestor_commit

if [ -z $common_ancestor_commit || $common_ancestor_commit eq "" ]; then
  echo Cannot find a common ancestor commit! Nothing to squash, exiting.
  exit 1
fi

read -p "Begin interactive rebase? " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit 1
fi

git rebase -i $common_ancestor_commit

echo
exit 0
